%load char~();;
~:pack = %load rbbpack
~:tostrdata = %load rbbconsttostr

~:mk_str_data = ~.{
  # Start string capacity at 64 bytes
  !:data = ~pack (64|), len = 0
}

~:str_push_back = ~fn~ strdata ch {
  ~:len = ~strdata len
  ~:datalen = ~strdata data len

  ~len == (~datalen) if_true ~.{
    ~strdata:data = ~strdata data concat (~pack (~datalen|))  # double capacity
  }

  ~strdata data|~len, ~ch
  ~strdata:len = ~len + 1
}

~:mk_string = ~fn~ strdata {
  !(:
    strdata = ~strdata,
    mk_string = ~mk_string,
    mk_str_data = ~mk_str_data,
    pack = ~pack,
    str_push_back = ~str_push_back,
    while = ~while).{
    # Make the string respond to the "string" interface

    ~:msg = $
    !~msg == has_iface if_true ~.{
      !(~merge:).{
        ($ has_iface|array) if_true_raise:
          error = has_iface_arg_should_be_wrapped

        ~:ifacename = $0
        !~ifacename == string if_true ().{!?t} ~.{
          !~strdata data has_iface (|~ifacename)
        }
      }
    } ~.{
      !~msg == concat if_true ~.{
        !(~merge:).{
          ~:other = $
          (~other has_iface|string) neg if_true_raise:
            error = string_expected,
            got = ~other

          ~:new = ~mk_str_data()

          ~:i = 0
          ~while~ {!~i < (~strdata data len)} {
            ~str_push_back (~new) (~strdata data (~i))
            ~:i = ~i + 1
          }

          ~:i = 0
          ~while~ {!~i < (~other len)} {
            ~str_push_back (~new) (~other (~i))
            ~:i = ~i + 1
          }

          !~mk_string (~new)
        }
      } ~.{
        !~msg == len if_true ~.{
          !~strdata len
        } ~.{
          !~strdata data (~msg)
        }
      }
    }
  }
}

%lit:
  trigger = '"',
  eval = ~fn~ stream {
    ~:strdata = ~mk_str_data()

    ~stream skip
    ~while~ {!~stream char_val /= '"'} {
      ~str_push_back (~strdata) (~read_char (~stream))
      ~stream skip
    }

    !~mk_string (~strdata)
  };;

~:visited_to_string = ~fn~ el parent visited {
  ~:contains = ?f, i = 0
  ~while~ {!~i < (~visited len) and (~contains neg)} {
    ~:contains = ~visited (~i) == (~el)
    ~:i = ~i + 1
  }

  ~contains if_true ~.{
    ~:el_to_string = "..."
  } ~.{
    ~:el_to_string = ~obj_to_string_with_visits (~el) (~visited concat|~parent)
  }

  !~el_to_string
}

~:listable_to_string = ~fn~ list visited {
  ~:str = "(|"

  ~foreach~ (~list) el {
    ~:str = ~str concat (~visited_to_string (~el) (~list) (~visited))

    ~last_iteration neg if_true ~.{
      ~:str = ~str concat ", "
    }
  }

  ~:str = ~str concat ")"
  !~str
}

~:table_to_string = ~fn~ table visited {
  ~:str = "(:"

  ~foreach~ (~table keys) k {
    ~:str =
      (~str concat (~obj_to_string (~k))
        concat " = " concat (
          ~visited_to_string (~table (~k)) (~table) (~visited)))

    ~last_iteration neg if_true ~.{
      ~:str = ~str concat ", "
    }
  }

  ~:str = ~str concat ")"
  !~str
}

~:obj_to_string = ~fn~ obj {
  !~obj_to_string_with_visits (~obj) (|)
}

~:obj_to_string_with_visits = ~fn~ obj visited {
  !(~obj responds_to|==) if_true ~.{
    !(~obj has_iface|string) if_true ~.{
      !"\"" concat (~obj) concat "\""
    } ~.{
      !(~obj responds_to|to_string) and ((~obj has_iface|block) neg) if_true ~.{
        !~obj to_string  # TODO pass visited info to to_string
      } ~.{
        !(~obj == () or
          (~obj has_iface|numeric) or
          (~obj has_iface|symbol) or
          (~obj has_iface|boolean)) if_true ~.{
            ~:d = :data = ~tostrdata (~obj)
            ~d:len = ~d data len

            !~mk_string (~d)
          } ~.{
            !(~obj has_iface|listable) if_true ~.{
              !~listable_to_string (~obj) (~visited)
            } ~.{
              !(~obj has_iface|table) if_true ~.{
                !~table_to_string (~obj) (~visited)
              } ~.{
                !(~obj has_iface|block) if_true ~.{
                  !"[block]"
                } ~.{
                  # TODO allow hooks
                  !"[unknown]"
                }
              }
            }
          }
      }
    }
  } ~.{
    !"[opaque]"
  }
}
