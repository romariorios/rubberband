# curry will turn the arguments from a curried function
# into a table inside the function. Ex.:
# ~:f -> ~curry~ |[a, b, c] { !:a -> $a, b -> $b, c -> $c }
# ~:g -> ~f a b c   # returns :a -> a, b -> b, c -> c
~:curry ->
{
  ~:context -> $
  !{
    ~:args -> $
    !{
      ~:block -> $
      !{
        ~:first_arg -> $
        ~:loop -> {
          ~block_args:(~args(~i)) -> $

          !~i < (~args* - 1)?~ {
            ~:i -> ~i + 1
            !~loop~
          } {
            !~block(~context)(~block_args)
          }
        }

        !~loop(~ + :i -> 1, block_args -> :[(~args 0) -> ~first_arg])
      }~
    }~
  }~
}:[]

# while will loop until the condition becomes false. Ex.:
# ~:i -> 0
# ~while~ { !~i < 10 } { ~print (~i); ~:i -> ~i + 10 }
~:while -> ~curry:[] |[context, condition, block] {
  ~$
  ~:loop -> {
    ~condition(~context)()?~ {
      ~block(~context)()
      ~loop~()
    }
  }
  ~loop(~ + :[])()
}
