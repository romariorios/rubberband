# ~assert_condition|<condition>, <error>, <from>, <arg_name>, <extra_args>
~:assert_cond = {
  ~:extra = $4
  ~extra has_iface table neg if_true ~.{
    ~:extra = (:)
  }

  $0 neg if_true_raise ($4:
    error = $1,
    from = $2,
    arg_name = $3)
}(:)

# ~assert_for_blk <blk_name>
# ~:assert = ~assert_for_blk blk
# ~assert|<condition>, <error>, <arg_name>, <extra_args>
~:assert_for_blk = {
  !{ !~ctx assert_cond|$0, $1, ~blk_name, $2, $3 }:ctx = ~, blk_name = $
}~

# ~curry_until <cond_fun> <function>
# <cond_fun> will be given the following parameters:
# - index: Index of current arg
# - arg: The arg itself
# Example:
# ~curry_until ().{!$index == 1} ().{!$0 + ($1)}

~:curry_until = ().{
  !(:cond = $).{
    !(~merge:arg_list = (|), function = $, index = 0).{
      ~:uncurry = {
        ~:arg = $
        ~:arg_list = ~arg_list concat|~arg

        !~cond (~|arg, index) if_true ~.{
          !~function (~arg_list)
        } ~.{
          ~:index = ~index + 1
          !~uncurry (~merge:)
        }
      }

      !~uncurry (~merge:) $
    }
  }
}

# while will loop until the condition becomes false. Ex.:
# ~:i = 0
# ~while~ { !~i < 10 } { ~print (~i); ~:i = ~i + 10 }

~:while = ~curry_until ().{!$index == 2} (:assert = ~assert_for_blk while).{
  ~:ctx = $0, cond = $1, blk = $2

  ~assert|~cond has_iface block, expecting_block, cond, :got = ~cond
  ~assert|~blk has_iface block, expecting_block, blk, :got = ~blk

  ~:loop = {
    ~cond (~ctx) () if_true ~.{
      ~blk (~ctx) ()
      ~loop (~merge:) ()
    }
  }

  ~loop (~merge:) ()
}

# fn_ctx grabs the external context while not allowing
# the internal context to "leak". Ex.:
# ~:a = 10
# ~:b = 20
# ~:ctx = ~fn_ctx~
# ~ctx a  # 10
# ~ctx b  # 20
# ~ctx:c = 30
# ~c      # ()
~:fn_ctx = {
  !{
    ~assert|$ has_iface symbol or ($ has_iface table), expecting_symbol_or_table, access_obj, :got = $

    !$ == ____clear_locals if_true ~.{
      ~:local = (:)
    } (~:_a = $).{
      !(~local responds_to|~_a) if_true ~.{
        !~local(~_a)
      } ~.{
        !~external(~_a)
      }
    }
  }:local = (:), external = $, assert = ~assert_for_blk fn_ctx_instance
}~

# ~construct_table <symbols> <values>
# ~construct_table (|a, b, c) (|10, 20, 30)
# # Returns (:a = 10, b = 20, c = 30)

~:construct_table = ~curry_until ().{!$index == 1} (~merge:).{
  ~:ks = $0, values = $1
  ~:new_table = (:)

  ~:i = 0
  ~while~ {!~i < (~ks len)} {
    ~new_table:~ks (~i) = ~values (~i)
    ~:i = ~i + 1
  }

  !~new_table
}


# ~:fac = ~fn~ n { !~n <= 1 if_true ().{ !1 } ~.{ !~n * (~fac(~n - 1)) } }
# ~fac 4   # Returns 24

~:fn = ~curry_until ().{!$arg has_iface block} (~merge:assert = ~assert_for_blk fn).{
  # First arg is the context, last arg is the block
  # All other args are the arg_names
  ~:ctx = $0, blk = $($ len - 1)
  ~:arg_names = $ slice|1, $ len - 2

  ~assert|~arg_names has_iface listable, expecting_array, arg_names, :got = ~arg_names
  ~assert|~blk has_iface block, expecting_block, blk, :got = ~blk

  !~curry_until (~merge:).{!$index == (~arg_names len - 1)} (~merge:).{
    ~:ctx = ~fn_ctx (~ctx)
    ~ctx (~construct_table (~arg_names) $)

    ~:ret = ~blk (~ctx) ()

    ~ctx ____clear_locals
    !~ret
  }
}

~:use_assert = { ~:assert = ~assert_for_blk$ }

# Iteration block context (to be used in map, accum)
~:it_block_ctx = ().{
    !(:ctx = $0, vars = $1).{
        ~:msg = $

        !~msg has_iface symbol and (~vars responds_to|~msg) if_true ~.{
            !~vars (~msg)
        } ~.{
            !~ctx (~msg)
        }
    }
}

# ~:list = ~map~ (|1, 2, 3, 4, 5) n { !~n * (~n) }
# # ~list will be (|1, 4, 9, 16, 25)
~:map = ~fn~ ctx array varname blk {
  ~use_assert~map
  ~assert|~array has_iface listable, expecting_array, array, :got = ~array
  ~assert|~varname has_iface symbol, expecting_symbol, varname, :got = ~varname
  ~assert|~blk has_iface block, expecting_block, blk, :got = ~blk

  ~:result = (~array len|)

  ~:i = 0
  ~while~ { !~i < (~array len) } {
    ~result|~i, ~blk (~it_block_ctx|~ctx, (:~varname = ~array (~i))) ()
    ~:i = ~i + 1
  }

  !~result
}

# Similar to map, but returns nothing

~:foreach = ~fn~ ctx array varname blk {
  ~use_assert~foreach
  ~assert|~array has_iface listable, expecting_array, array, :got = ~array
  ~assert|~varname has_iface symbol, expecting_symbol, varname, :got = ~varname
  ~assert|~blk has_iface block, expecting_block, blk, :got = ~blk

  ~:i = 0, last = ?f
  ~while~ {!~i < (~array len)} {
    ~i + 1 == (~array len) if_true ~.{
      ~:last = ?t
    }
  
    ~blk (~it_block_ctx|
      ~ctx, (:
        ~varname = ~array (~i),
        last_iteration = ~last)) ()
    ~:i = ~i + 1
  }
}

# ~:val = ~accum~ (|1, 2, 3, 4, 5, 6) n prod { !~n * (~prod) }
# # ~val will be 720
~:accum = ~fn~ ctx array item_name accum_name blk {
  ~use_assert~accum
  ~assert|~array has_iface listable, expecting_array, array, :got = ~array
  ~assert|~item_name has_iface symbol, expecting_symbol, item_name, :got = ~item_name
  ~assert|~accum_name has_iface symbol, expecting_symbol, accum_name, :got = ~accum_name
  ~assert|~blk has_iface block, expecting_block, blk, :got = ~blk

  # Initialize with first element of array
  # TODO allow optional parameter to set initial value
  ~:res = ~array 0

  ~map~ (~array) el {
    ~:res = ~blk (~it_block_ctx|
      ~ctx,
      (:~item_name = ~el, ~accum_name = ~res)) ()
  }

  !~res
}

~:range = ~fn~ args {
  ~(~args)  # Merges args and the current context
  ~use_assert~range
  ~assert|~to has_iface numeric, expecting_number, to, :got = ~to

  (~ responds_to|from) if_true ~.{
    ~assert|~from has_iface numeric, expecting_number, from, :got = ~from
  } ~.{
    ~:from = 0
  }

  (~ responds_to|step) if_true ~.{
    ~assert|~step has_iface numeric, expecting_number, step, :got = ~step
  } ~.{
    ~:step = 1
  }

  ~:range_size = ~to - (~from) / (~step) + 1

  ~:val = ~from
  !~map~ (~range_size(|)) _ { ~:ret = ~val; ~:val = ~val + (~step) !~ret }
}
