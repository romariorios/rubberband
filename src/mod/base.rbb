# ~assert_condition|<condition>, <error>, <from>, <arg_name>, <extra_args>
~:assert_cond -> {
  ~:extra -> $4
  ~extra <<? [:] ><?~ {
    ~:extra -> (:)
  }

  $0 >< ^($4:
    error -> $1,
    from -> $2,
    arg_name -> $3)
}(:)

# ~assert_for_blk <blk_name>
# ~:assert -> ~assert_for_blk blk
# ~assert|<condition>, <error>, <arg_name>, <extra_args>
~:assert_for_blk -> {
  !{ !~ctx assert_cond|$0, $1, ~blk_name, $2, $3 }:ctx -> ~, blk_name -> $
}~

# curry will turn the arguments from a curried function
# into a table inside the function. Ex.:
# ~:f -> ~curry~ (|a, b, c) { !:a -> $a, b -> $b, c -> $c }
# ~:g -> ~f a b c   # returns :a -> a, b -> b, c -> c
~:curry ->
{
  !{
    ~assert|$ <<? [|], expecting_array, args, :got -> $
    ~assert|$* /= 0, empty_array, args, :got -> $

    ~:args -> $
    !{
      ~assert|$ <<? [{}], expecting_block, block, :got -> $

      ~:block -> $
      !{
        ~:first_arg -> $

        !~args* <= 1?~ {
          !~block(~context):(~args 0) -> ~first_arg
        } {
          ~:loop -> {
            ~block_args:(~args(~i)) -> $

            !~i < (~args* - 1)?~ {
              ~:i -> ~i + 1
              !~loop~
            } {
              !~block(~context)(~block_args)
            }
          }

          !~loop(~ + :i -> 1, block_args -> (:(~args 0) -> ~first_arg))
        }
      }~
    }~
  }(~ + :context -> $)
}(~:assert -> ~assert_for_blk curry)

# while will loop until the condition becomes false. Ex.:
# ~:i -> 0
# ~while~ { !~i < 10 } { ~print (~i); ~:i -> ~i + 10 }
~:while -> ~curry(:assert -> ~assert_for_blk while) (|context, condition, block) {
  ~assert|$condition <<? [{}], expecting_block, condition, :got -> $condition
  ~assert|$block <<? [{}], expecting_block, block, :got -> $block

  ~$
  ~:loop -> {
    ~condition(~context)()?~ {
      ~block(~context)()
      ~loop~()
    }
  }
  ~loop(~ + :)()
}

# fn_ctx grabs the external context while not allowing
# the internal context to "leak". Ex.:
# ~:a -> 10
# ~:b -> 20
# ~:ctx -> ~fn_ctx~
# ~ctx a  # 10
# ~ctx b  # 20
# ~ctx:c -> 30
# ~c      # ()
~:fn_ctx -> {
  !{
    ~assert|$ <<? [a] \/ ($ <<? [:]), expecting_symbol_or_table, access_obj, :got -> $

    !$ == ____clear_locals?(~:_a -> $) {
      ~:local -> (:)
    } {
      !~local << (~_a)?~ {
        !~local(~_a)
      } {
        !~external(~_a)
      }
    }
  }:local -> (:), external -> $, assert -> ~assert_for_blk fn_ctx_instance
}~

# ~:fac -> ~fn~ (|n) { !~n <= 1?~ { !1 } { !~n * (~fac(~n - 1)) } }
# ~fac 4   # Returns 24
~:fn -> ~curry(~ + :assert -> ~assert_for_blk fn) (|ctx, arg_names, blk) {
  ~assert|$arg_names <<? [|], expecting_array, arg_names, :got -> $arg_names
  ~assert|$blk <<? [{}], expecting_block, blk, :got -> $blk

  !~curry(:blk -> $blk, ctx -> ~fn_ctx($ctx))($arg_names){
    ~ctx $
    ~:____ret -> ~blk(~ctx)()
    ~ctx ____clear_locals

    !~____ret
  }
}

~:use_assert -> { ~:assert -> ~assert_for_blk$ }

# ~:list -> ~map~ (|1, 2, 3, 4, 5) { !$ * $ }
# # ~list will be (|1, 4, 9, 16, 25)
~:map -> ~fn~ (|ctx, array, blk) {
  ~use_assert~map
  ~assert|~array <<? [|], expecting_array, array, :got -> ~array
  ~assert|~blk <<? [{}], expecting_block, blk, :got -> ~blk

  ~:result -> ~array*(|)

  ~:i -> 0
  ~while~ { !~i < (~array*) } {
    ~result|~i, ~blk(~ctx)(~array(~i))
    ~:i -> ~i + 1
  }

  !~result
}

# ~:val -> ~accum~ (|1, 2, 3, 4, 5, 6):init -> { !1 }, step -> { !$e * ($val) }
# # ~val will be 720
~:accum -> ~fn~ (|ctx, array, blks) {
  ~use_assert~accum
  ~assert|~array <<? [|], expecting_array, array, :got -> ~array
  ~assert|~blks step <<? [{}], expecting_block, step, :got -> ~blks step

  ~:res -> ~blks init
  ~map~ (~array) { ~:res -> ~blks step(~ctx):e -> $, val -> ~res }
  !~res
}

~:range -> ~fn~ (|args) {
  ~(~args)  # Merges args and the current context
  ~use_assert~range
  ~assert|~to <<? [0], expecting_number, to, :got -> ~to

  ~ << from ?~ {
    ~assert|~from <<? [0], expecting_number, from, :got -> ~from
  } {
    ~:from -> 0
  }

  ~ << step ?~ {
    ~assert|~step <<? [0], expecting_number, step, :got -> ~step
  } {
    ~:step -> 1
  }

  ~:range_size -> ~to - (~from) / (~step) + 1

  ~:val -> ~from
  !~map~ (~range_size(|)) { ~:ret -> ~val; ~:val -> ~val + (~step) !~ret }
}
