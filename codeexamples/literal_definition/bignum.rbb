$ /= array if_true~ {
  ~:pack -> %load rbbpack
} {
  ~:pack -> { !$ }()
}

~:isdigit -> {
  !($ == '0 or
  ($ == '1) or
  ($ == '2) or
  ($ == '3) or
  ($ == '4) or
  ($ == '5) or
  ($ == '6) or
  ($ == '7) or
  ($ == '8) or
  ($ == '9))
}()

~:adjust -> {
  ~:val -> $0
  ~:ba -> $

  ~val >= 256 if_true~ {
    ~ba|0, ~val mod 256

    ~ba len == 1 if_true~ {
      ~:ba -> ~ba concat |0
    }

    ~ba|1, ~ba 1 + (~val / 256)
  }
  
  !~ba len <= 1 if_true~ {
    !~ba
  } {
    !(|~ba 0) concat (~adjust ((|~ba 1) concat (~ba slice|2, ~ba len - 2)))
  }
}~

~:mult_n -> {
  ~:ba -> $0, n -> $1

  !~ba len <= 1 if_true~ {
    !(|~ba 0 * (~n))
  } {
    !(|~ba 0 * (~n)) concat (~mult_n|(~ba slice|1, ~ba len - 1), ~n)
  }
}~

~:plus -> {
  ~:nums -> $
  
  !~nums 0 len == 0 if_true~ {
    !~nums 1
  } {
    !~nums 1 len == 0 if_true~ {
      !~nums 0
    } {
      !(
        (|~nums 0 0 + (~nums 1 0)) concat
        (~plus|
          (~nums 0 slice|1, ~nums 0 len - 1),
          (~nums 1 slice|1, ~nums 1 len - 1))
      )
    }
  }
}~

~:mult -> {
  ~:nums -> $
  
  !~nums 1 len == 0 if_true~ {
    !(|)
  } {
    !~plus|
      (~mult_n|~nums 0, ~nums 1 0),
      (|0) concat (
        ~mult|
          ~nums 0,
          ~nums 1 slice (|1, ~nums 1 len - 1))
  }
}~

~:make_bignum -> {
  ~:make_bignum -> @~

  !{
    ~:arg -> $
    ~:sel -> {
      ~:val -> $1
      ~arg == ($0) if_true~ {
        ~:res -> ~val
      }
    }~

    ~sel|*, {!~make_bignum (~pack (~_mult~($data)))}~
    ~sel|+, {!~make_bignum (~pack (~_plus~($data)))}~
    ~sel|==, {!~d == ($data)}~  # will not work for arrays
    ~sel|/=, {!~d /= ($data)}~
    ~sel|data, ~d

    ~ << res neg if_true_raise:error -> unknown_method, got -> ~arg
    
    !~res
  }(~merge:d -> $)
}((~|adjust, mult, pack, plus) merge:
  _mult -> {
    !~adjust (~mult|~d, $)
  },
  _plus -> {
    !~adjust (~plus|~d, $)
  })

%lit:
  trigger -> 'N,
  eval -> {
    ~:parser -> $

    !{
      ~parser skip
      ~:val -> |0
      ~:loop -> {
        ~:cur_char -> ~parser char_val

        !~isdigit (~cur_char) if_true~ {
          ~:val -> ~mult_n|~val, 10
          ~val|0, ~val 0 + (~cur_char) - '0
          ~:val -> ~adjust (~val)

          ~parser skip

          !~loop~()
        } {
          ~parser back

          !~make_bignum (~pack (~val))
        }
      }

      !~loop~()
    }~
  }(~|adjust, isdigit, make_bignum, mult_n, pack)

