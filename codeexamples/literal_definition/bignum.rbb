$ /= array? ~ {
  ~:pack -> %^rbbpack
} {
  ~:pack -> { !$ }()
}

~:isdigit -> {
  !($ == '0 \/
  ($ == '1) \/
  ($ == '2) \/
  ($ == '3) \/
  ($ == '4) \/
  ($ == '5) \/
  ($ == '6) \/
  ($ == '7) \/
  ($ == '8) \/
  ($ == '9))
}()

~:adjust -> {
  ~:val -> $0
  ~:ba -> $

  ~val >= 256?~ {
    ~ba|0, ~val mod 256

    ~ba* == 1?~ {
      ~:ba -> ~ba + |0
    }

    ~ba|1, ~ba 1 + (~val / 256)
  }
  
  !~ba* <= 1?~ {
    !~ba
  } {
    !(|~ba 0) + (~adjust ((|~ba 1) + (~ba / |2, ~ba* - 2)))
  }
}~

~:mult_n -> {
  ~:ba -> $0, n -> $1

  !~ba* <= 1?~ {
    !(|~ba 0 * (~n))
  } {
    !(|~ba 0 * (~n)) + (~mult_n|(~ba / |1, ~ba* - 1), ~n)
  }
}~

~:plus -> {
  ~:nums -> $
  
  !~nums 0* == 0?~ {
    !~nums 1
  } {
    !~nums 1* == 0?~ {
      !~nums 0
    } {
      !(
        (|~nums 0 0 + (~nums 1 0)) +
        (~plus|
          (~nums 0 / |1, ~nums 0* - 1),
          (~nums 1 / |1, ~nums 1* - 1))
      )
    }
  }
}~

~:mult -> {
  ~:nums -> $
  
  !~nums 1* == 0?~ {
    !(|)
  } {
    !~plus|
      (~mult_n|~nums 0, ~nums 1 0),
      (|0) + (
        ~mult|
          ~nums 0,
          ~nums 1 / (|1, ~nums 1* - 1))
  }
}~

~:make_bignum -> {
  ~:make_bignum -> @~

  !{
    ~:arg -> $
    ~:sel -> {
      ~:val -> $1
      ~arg == ($0)?~ {
        ~:res -> ~val
      }
    }~

    ~sel|*, {!~make_bignum (~pack (~_mult~($data)))}~
    ~sel|+, {!~make_bignum (~pack (~_plus~($data)))}~
    ~sel|==, {!~d == ($data)}~  # will not work for arrays
    ~sel|/=, {!~d /= ($data)}~
    ~sel|data, ~d

    ~ << res >< ^:error -> unknown_method, got -> ~arg
    
    !~res
  }(~ + :d -> $)
}((~|adjust, mult, pack, plus) + :
  _mult -> {
    !~adjust (~mult|~d, $)
  },
  _plus -> {
    !~adjust (~plus|~d, $)
  })

%lit:
  trigger -> 'N,
  eval -> {
    ~:parser -> $

    !{
      ~parser skip
      ~:val -> |0
      ~:loop -> {
        ~:cur_char -> ~parser char_val

        !~isdigit (~cur_char)?~ {
          ~:val -> ~mult_n|~val, 10
          ~val|0, ~val 0 + (~cur_char) - '0
          ~:val -> ~adjust (~val)

          ~parser skip

          !~loop~()
        } {
          ~parser back

          !~make_bignum (~pack (~val))
        }
      }

      !~loop~()
    }~
  }(~|adjust, isdigit, make_bignum, mult_n, pack)

