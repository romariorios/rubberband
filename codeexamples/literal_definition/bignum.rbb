$ /= array? ~ {
  ~:pack -> %^rbbpack
} {
  ~:pack -> { !$ }()
}

~:isdigit -> {
  !($ == '0 \/
  ($ == '1) \/
  ($ == '2) \/
  ($ == '3) \/
  ($ == '4) \/
  ($ == '5) \/
  ($ == '6) \/
  ($ == '7) \/
  ($ == '8) \/
  ($ == '9))
}()

~:adjust -> {
  ~:val -> $0
  ~:ba -> $

  ~val >= 256?~ {
    ~ba|0, ~val mod 256

    ~ba* == 1?~ {
      ~:ba -> ~ba + |0
    }

    ~ba|1, ~ba 1 + (~val / 256)
  }
  
  !~ba* <= 1?~ {
    !~ba
  } {
    !(|~ba 0) + (~adjust ((|~ba 1) + (~ba / |2, ~ba* - 2)))
  }
}~

~:mult -> {
  ~:ba -> $0, n -> $1

  !~ba* <= 1?~ {
    !(|~ba 0 * (~n))
  } {
    !(|~ba 0 * (~n)) + (~mult|(~ba / |1, ~ba* - 1), ~n)
  }
}~

%+:
  > -> 'N,
  = -> {
    ~:parser -> $

    !{
      ~parser>
      ~:val -> |0
      ~:loop -> {
        ~:cur_char -> ~parser*

        !~isdigit (~cur_char)?~ {
          ~:val -> ~mult|~val, 10
          ~val|0, ~val 0 + (~cur_char) - '0
          ~:val -> ~adjust (~val)

          ~parser>

          !~loop~()
        } {
          ~parser<

          !~pack(~val)
        }
      }

      !~loop~()
    }~
  }(~|adjust, isdigit, mult, pack)

