# A custom while implementation
# Get arguments from curried functions and put them into a list
# ~uncurry|[x, y]{ !$x + $y }~
~:uncurry ->
{
    ~:args -> $
    !{
        ~:block -> $
        !{
            ~:context -> $
            !{
                ~:first_arg -> $
                ~:loop -> {
                    ~block_args:(~args(~i)) -> $

                    !~i < (~args* - 1)?~ {
                        ~:i -> ~i + 1
                        !~loop~
                    } {
                        !~block(~context)(~block_args)
                    }
                }

                !~loop(~ + :i -> 1, block_args -> :[(~args 0) -> ~first_arg])
            }~
        }~
    }~
}:[]

# While
# ~while~ { !~i < 20 } { ~print(~i) }
~:while -> ~uncurry|[context, condition, block] {
    ~$
    ~:loop -> {
        ~condition(~context)()?~ {
            ~block(~context)()
            ~loop~()
        }
    }
    ~loop(~ + :[])()
}:[]

~:i -> 0
~while~ { ~:i -> ~i + 1 !~i < 5 } {
    ~:j -> 0
    ~while~ { ~:j -> ~j + 1 !~j < 5 } { ~print|~i, ~j }
    ~:k -> 0
    ~while~ { ~:k -> ~k + 2 !~k < 7 } { ~print|~i, ~k }
}
