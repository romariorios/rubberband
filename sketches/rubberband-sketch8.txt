Object syntax definition (more or less formal):
empty: \[\]
number: [0-9]+(\.[0-9]*)?
symbol: ([a-zA-Z_][a-zA-Z_]* | \? | \+ | \- | \:\:)
variable: \[\*{object}]
list: \[\| (({object}\,)*{object})?\]
object: \[\: (({symbol}\={object}\,)*{symbol}\={object})? \]
subblock: \{ {statement}* \}
block: \[\~{object}\<{symbol}?\>{symbol}?\:\:{block} \]
--- MORE EXAMPLES YAAAY ---
# ~while { [: istrue = ~a == (~b) ] } subbl
# Now I try to make a fibonacci algorithm
~[:
    while = # TODO
    fib = [~[: fib0 = 0, fib1 = 1 ] <fibn >n {
        ~n == 0? {
            ~[: fibn = 0 ]
        } {~n == 1? {
            ~[: fibn = 1 ]
        } {
            ~[: i = 2 ]
            ~while { [: istrue = ~i <= (~n) ] } {
                ~[: tmp = ~fib1, fib1 = ~fib1 + (~fib0) ]
                ~[: fib0 = ~tmp, i = i + 1 ]
            }
            ~[: fibn = fib1 ]
        }}
    } ]
]

# Different "if" syntax
~[:
    while = # TODO
    fib = [~[: fib0 = 0, fib1 = 1 ] <fibn >n {
        ~n == 0 {
            ~[: fibn = 0 ]
        } (~n == 1) {
            ~[: fibn = 1 ]
        } [] {
            ~[: i = 2 ]
            ~while { [: istrue = ~i <= (~n) ] } {
                ~[: tmp = ~fib1, fib1 = ~fib1 + (~fib0), fib0 = tmp, i = i + 1 ]
            }
            ~[: fibn = fib1 ]
        }
    } ]
]
