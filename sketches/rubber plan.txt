Rubberband plan:
 - Gather all the sketches together in this list
 - Define each base object and all the messages they will respond to
   Definitions
   * Boolean: A truth value
   * Empty: The void
   * Number: A numeric value
   * Symbol: A generic symbol, without any arithmetic properties, order or size
   * Array: An ordered, fixed-size, mutable set of elements
   * Table: A table which maps from symbols to any other objects
   * Block: An object which receives a message, processes it over a given context, and returns
            another objects
     Defintions inside a block:
     ° $ (message): The message received by the block
     ° ~ (context): The context the block runs on. Usually, it's a symbol table
     ° @ (self-reference): A reference to the block itself
   Messages
   (Note: if an object receives an unexpected message, it answers Empty and does nothing)
   The following list groups several messages that make part of the same curried call. Each
   message which isn't a symbol is represented by the format <name: Type>. BlockWC means
   block with context.
   * Boolean
     Expected messages:
     ° == <other: Boolean>
       Answer: True if other equals this boolean; false otherwise
     ° != <other: Boolean>
       Answer: True if other does not equal this boolean; false otherwise
     ° \/ <other: Boolean>
       Answer: ORs this boolean and other
     ° /\ <other: Boolean>
       Answer: ANDs this boolean and other
     ° ><
       Answer: The negation of this boolean (NOT)
     ° ? <context: Object> <ifTrueBlock: Block> <ifFalseBlock: Block>
       Answer: If this boolean is true, returns the answer of ifTrueBlock; otherwise, returns
               the answer of ifFalseBlock
   * Empty
     Expected messages:
     ° == <object: Object>
       Answer: True if object is Empty; false otherwise
     ° != <object: Object>
       Answer: True if object is not Empty; false otherwise
   * Number
     Expected messages:
     ° == <n: Number>
       Answer: True if this and n are equal; false otherwise
     ° != <n: Number>
       Answer: True if this and n are not equal; false otherwise
     ° > <n: Number>
       Answer: True if this is greater than n; false otherwise
     ° < <n: Number>
       Answer: True if this is less than n; false otherwise
     ° >= <n: Number>
       Answer: True if this is greater than or equal to n; false otherwise
     ° <= <n: Number>
       Answer: True if this is less than or equal to n; false otherwise
     ° + <n: Number>
       Answer: This plus n
     ° - <n: Number>
       Answer: This minus n
     ° * <n: Number>
       Answer: This times n
     ° / <n: Number>
       Answer: This divided by n
   * Symbol
     Expected messages:
     ° == <s: Symbol>
       Answer: True if this equals s; false otherwise
     ° != <s: Symbol>
       Answer: True if this does not equal s; false otherwise
   * Array
     Expected messages:
     ° == <a: Array>
       Answer: True if a is this object; false otherwise
     ° != <a: Array>
       Answer: True if a is not this object; false otherwise
     ° <index: Number>
       Answer: The object at the index; empty if the index is out of range
     ° <: Array[<index: Number>, <obj: Object>]>
       Does: Replaces the element at index by obj
     ° *
       Answer: The size of the list
     ° + <a: Array>
       Answer: This and a concatenated
     ° / <: Array[<i: Number>, <s: Number>]>
       Answer: Returns a subset of the current array of size s from index i
   * Block
     Expected messages:
     ° <context: Object> <m: Object>
       Does: Executes the block over context (~) with the message m ($)
       Answer: The Object that results from the expression after the exclamation mark
   * Table
     Expected messages:
     ° == <t: Table>
       Answer: True if a is this object; false otherwise
     ° != <t: Table>
       Answer: True if a is not this object; false otherwise
     ° + <t: Table>
       Answer: This and t concatenated
     ° *
       Answer: Array containing the symbols to which this responds
     ° <s: Symbol>
       Answer: If it isn't any of the symbols above, the Object to which s points
     ° <t: Table>
       Does: Unites t and this
       Answer: This
 - Define the language syntax
   * Grammar
     start -> object
     object -> boolean | empty | number | symbol | list | block | gen_object | ext_object | \~ | \$
     boolean -> \true | \false
     empty -> \[]
     number -> [0-9]+([\.][0-9]+)?
     symbol -> [a-zA-Z_] [a-zA-Z0-9_]* | ([=] | [!]) [=] | ([<] | [>]) [=]? | [+] | [\-] | [*] | [/] | [?][|]?
     expr -> object | msg_send
     msg_send -> expr msg
     msg -> object | \( expr \)
     list -> \[ list_size \| list_elements \]
     list_size -> expr | $/
     list_elements -> expr list_elements_tail | $
     list_elements_tail -> \, expr list_elements_tail | $
     block -> \{ expr_list block_answer \}
     expr_list -> expr expr_list_tail | $
     expr_list_tail -> separator expr expr_list_tail | $
     block_answer -> \! expr | $
     gen_object -> \[ \: answer_list \]
     answer_list -> answer answer_list_tail | $
     answer_list_tail -> \, answer answer_list_tail | $
     answer -> symbol \= expr
     ext_object -> \^ symbol
   * Semantics
     Boolean: True and false. It's meant to handle control structures.
     Empty: The void. Answers itself to any message.
     Number: A number. Implements arithmetic stuff.
     Symbol: It's used as a label of objects.
     Array: |size|[ element1, element2, element3, ...] or
            |[ element1, element2, element3, ...]
            | element1, element2, element3, ... (can't define the size using abbreviated syntax)
     ° Creates an array of size "size" with the defined objects as elements. If a size isn't specified, the list will be the size of the amount of elements.
       If size is smaller than the amount of elements passed, the last elements which don't fit the list will simply be ignored. If size is bigger than the
       amount of elements passed, the remaining spaces remain empty in the list. Trying to get an out-of-range element will return empty. Note that the size
       of an array cannot change during its lifetime; trying to make an out-of-bounds position point to any object will have no effect. Also, the length of
       a list is the length with which it was created, not the amount of non-empty elements it contains. Apart from that, every list is mutable -- in the
       sense that the user can change its elements.
     Block: { ~object1 $ msg1; ~object2 $ msg2; ... ! ~answer } or
     { ~object1 $ msg1
       ~object2 $ msg2
       ...
       ! answer }
     ° Creates a block of code that executes the passed statements and, then, returns the object defined after the exclamation mark. Inside a block, there
       are three special objects: ~, $, and @. ~ is meant to be the block's context, where the variables are stored to and retrieved from. The block is
       contextless initially, and it expects its context as the first message, returning itself under the passed context. This returned block, then,
       passes the messages it receives inside itself as the $ upon execution. Worth noting is that, although ~ is meant to be a table, you can pass any
       object to it if you want (even an empty one). Finally, the @ object is simply a self-reference without a defined context. Every block is mutable.
     Table: :[ msg1 => obj1, msg2 => obj2, ...] or
            : msg1 => obj1, msg2 => obj2, ...
     ° Maps symbols to objects. There are no guarantees of the order of the symbols. Note that pointing a symbol which is already used by the object (like :?)
       has no effect.
 - Define the source code dir structure
   /
   /LICENSE -- License
   /sketches -- Already there
   /src -- Source files
   /src/core -- Core rubberband files
   /src/core/objects.{h|c}pp -- The base objects defined above
   /src/interpreter -- Files for the interpreter
 - Starting coding the base objects (Yay!)
   * Done
 - Write a preliminary version of the interpreter
   * Only basic objects available (Boolean, Empty, Number, Symbol, Block)
 - Review sketches and update this plan accordingly
